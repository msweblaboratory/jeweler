<?php

namespace AndreiShilov\SPMBreadcrumbs\Components;

use Cms\Classes\ComponentBase;
use Illuminate\Support\Facades\URL;
use RainLab\Pages\Classes\MenuItemReference;
use RainLab\Pages\Classes\Menu;
use Cms\Classes\Theme;
use Request;
use App;


class Breadcrumbs extends ComponentBase
{
    /**
     * @var string
     */
    public $code;

    /**
     * @var array An array of the RainLab\Pages\Classes\MenuItemReference class.
     */
    public $breadcrumbs = [];

    /**
     * @var array A list of items generated by the menu.
     * Each item is an object of the RainLab\Pages\Classes\MenuItemReference class.
     */
    protected $menuItems = [];

    /**
     * @var string current URL
     */
    protected $url;

    public function componentDetails()
    {
        return [
            'name' => 'andreishilov.spmbreadcrumbs::lang.components.breadcrumbs.name',
            'description' => 'andreishilov.spmbreadcrumbs::lang.components.breadcrumbs.description'
        ];
    }

    public function defineProperties()
    {
        return [
            'use_locale' => [
                'title' => 'andreishilov.spmbreadcrumbs::lang.components.breadcrumbs.params.use_locale.name',
                'type' => 'checkbox',
                'default' => false,
            ],
            'code' => [
                'title' => 'andreishilov.spmbreadcrumbs::lang.components.breadcrumbs.params.code.name',
                'description' => 'andreishilov.spmbreadcrumbs::lang.components.breadcrumbs.params.code.description',
                'type' => 'dropdown',
                'required' => true,
                'depends' => ['use_locale']
            ],
        ];
    }

    public function getCodeOptions()
    {
        $result = [];

        $theme = Theme::getActiveTheme();
        $menus = Menu::listInTheme($theme, true);

        $useLocale = Request::input('use_locale');
        foreach ($menus as $menu) {
            if ($useLocale) {
                $pos = strlen($menu->code) - strlen(strrchr($menu->code, '-'));
                $result[substr($menu->code, 0, $pos)] = $menu->name;
            } else {
                $result[$menu->code] = $menu->name;
            }
        }

        return $result;
    }

    public function onRun()
    {
        if (!strlen($this->property('code'))) {
            return;
        }

        $code = $this->property('code');
        if ($this->property('use_locale')) {
            $locale = App::getLocale();
            $this->code = $code . '-' . $locale;
        } else {
            $this->code = $code;
        }

        $this->url = URL::to(Request::path());
        $theme = Theme::getActiveTheme();
        $menu = Menu::loadCached($theme, $this->code);

        if ($menu) {
            $this->menuItems = $menu->generateReferences($this->page);
            $this->initBreadcrumbs();
        }
    }

    protected function initBreadcrumbs()
    {
        $chain = [];
        $this->findNodeByUrl($this->menuItems, $chain);
        $this->breadcrumbs = $this->page['breadcrumbs'] = array_reverse($chain);
    }

    protected function findNodeByUrl($parent, &$chain)
    {
        if (is_array($parent)) {
            foreach ($parent as $child) {
                $node = $this->findNodeByUrl($child, $chain);
                if ($node) {
                    $chain[] = $child;
                    return $node;
                }
            }
        } elseif ($parent instanceof MenuItemReference) {
            if ($parent->url == $this->url) {
                return $parent;
            } else {
                if ($parent->items) {
                    foreach ($parent->items as $item) {
                        $node = $this->findNodeByUrl($item, $chain);
                        if ($node) {
                            $chain[] = $item;
                            return $node;
                        }
                    }
                }
            }
        }
    }
}
